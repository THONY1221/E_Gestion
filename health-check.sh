#!/bin/bash

# Script de v√©rification de sant√© ELSA GESTION
# √Ä ex√©cuter via cron toutes les 5 minutes
# */5 * * * * /var/www/elsa-gestion/health-check.sh

# Configuration
APP_NAME="elsa-gestion"
APP_URL="https://votre-domaine.com"  # Remplacez par votre domaine
API_URL="$APP_URL/api/users"
LOG_FILE="/var/log/elsa-health-check.log"
MAX_LOG_SIZE=10485760  # 10MB

# Fonction de logging avec rotation
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Rotation du log si trop volumineux
    if [ -f "$LOG_FILE" ] && [ $(stat -c%s "$LOG_FILE") -gt $MAX_LOG_SIZE ]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        touch "$LOG_FILE"
    fi
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# V√©rification de l'application web
check_web_app() {
    local http_status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$APP_URL")
    
    if [ "$http_status" = "200" ]; then
        log_message "INFO" "‚úÖ Application web accessible (HTTP $http_status)"
        return 0
    else
        log_message "ERROR" "‚ùå Application web inaccessible (HTTP $http_status)"
        return 1
    fi
}

# V√©rification de l'API
check_api() {
    local api_status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$API_URL")
    
    if [ "$api_status" = "200" ] || [ "$api_status" = "401" ]; then
        log_message "INFO" "‚úÖ API accessible (HTTP $api_status)"
        return 0
    else
        log_message "ERROR" "‚ùå API inaccessible (HTTP $api_status)"
        return 1
    fi
}

# V√©rification de PM2
check_pm2() {
    local pm2_status=$(pm2 jlist | jq -r ".[] | select(.name==\"$APP_NAME\") | .pm2_env.status" 2>/dev/null)
    
    if [ "$pm2_status" = "online" ]; then
        log_message "INFO" "‚úÖ PM2 process online"
        return 0
    else
        log_message "ERROR" "‚ùå PM2 process not online (status: $pm2_status)"
        return 1
    fi
}

# V√©rification de la base de donn√©es
check_database() {
    # Lire les informations de connexion depuis .env
    local db_user=$(grep "^DB_USER=" /var/www/elsa-gestion/.env | cut -d'=' -f2)
    local db_pass=$(grep "^DB_PASSWORD=" /var/www/elsa-gestion/.env | cut -d'=' -f2)
    local db_name=$(grep "^DB_NAME=" /var/www/elsa-gestion/.env | cut -d'=' -f2)
    
    if mysql -u "$db_user" -p"$db_pass" -e "SELECT 1;" "$db_name" &>/dev/null; then
        log_message "INFO" "‚úÖ Base de donn√©es accessible"
        return 0
    else
        log_message "ERROR" "‚ùå Base de donn√©es inaccessible"
        return 1
    fi
}

# V√©rification de l'espace disque
check_disk_space() {
    local disk_usage=$(df /var/www/elsa-gestion | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "$disk_usage" -lt 90 ]; then
        log_message "INFO" "‚úÖ Espace disque OK (${disk_usage}% utilis√©)"
        return 0
    else
        log_message "WARNING" "‚ö†Ô∏è Espace disque critique (${disk_usage}% utilis√©)"
        return 1
    fi
}

# V√©rification de la m√©moire
check_memory() {
    local memory_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    if [ "$memory_usage" -lt 90 ]; then
        log_message "INFO" "‚úÖ M√©moire OK (${memory_usage}% utilis√©e)"
        return 0
    else
        log_message "WARNING" "‚ö†Ô∏è M√©moire √©lev√©e (${memory_usage}% utilis√©e)"
        return 1
    fi
}

# Red√©marrage automatique de l'application
restart_application() {
    log_message "INFO" "üîÑ Tentative de red√©marrage automatique..."
    
    if pm2 restart "$APP_NAME" &>/dev/null; then
        log_message "INFO" "‚úÖ Application red√©marr√©e avec succ√®s"
        sleep 10  # Attendre que l'application d√©marre
        return 0
    else
        log_message "ERROR" "‚ùå √âchec du red√©marrage automatique"
        return 1
    fi
}

# Envoi d'alerte (optionnel - n√©cessite configuration email)
send_alert() {
    local subject="$1"
    local message="$2"
    
    # Exemple avec mail (n√©cessite configuration postfix/sendmail)
    # echo "$message" | mail -s "$subject" admin@votre-domaine.com
    
    # Ou webhook Slack/Discord
    # curl -X POST -H 'Content-type: application/json' \
    #   --data "{\"text\":\"$subject: $message\"}" \
    #   YOUR_WEBHOOK_URL
    
    log_message "INFO" "Alerte envoy√©e: $subject"
}

# Fonction principale
main() {
    local errors=0
    local warnings=0
    
    log_message "INFO" "üîç D√©but de la v√©rification de sant√©"
    
    # V√©rifications critiques
    if ! check_web_app; then
        ((errors++))
    fi
    
    if ! check_api; then
        ((errors++))
    fi
    
    if ! check_pm2; then
        ((errors++))
    fi
    
    if ! check_database; then
        ((errors++))
    fi
    
    # V√©rifications d'avertissement
    if ! check_disk_space; then
        ((warnings++))
    fi
    
    if ! check_memory; then
        ((warnings++))
    fi
    
    # Actions correctives
    if [ $errors -gt 0 ]; then
        log_message "ERROR" "‚ùå $errors erreur(s) d√©tect√©e(s)"
        
        # Tentative de red√©marrage automatique
        if restart_application; then
            # Rev√©rifier apr√®s red√©marrage
            sleep 5
            if check_web_app && check_api && check_pm2; then
                log_message "INFO" "‚úÖ Probl√®me r√©solu apr√®s red√©marrage"
                send_alert "ELSA GESTION - R√©cup√©ration automatique" "L'application a √©t√© red√©marr√©e automatiquement et fonctionne maintenant."
            else
                log_message "ERROR" "‚ùå Probl√®me persistant apr√®s red√©marrage"
                send_alert "ELSA GESTION - ERREUR CRITIQUE" "L'application ne r√©pond pas m√™me apr√®s red√©marrage automatique. Intervention manuelle requise."
            fi
        else
            send_alert "ELSA GESTION - ERREUR CRITIQUE" "Impossible de red√©marrer l'application automatiquement. Intervention manuelle requise."
        fi
    elif [ $warnings -gt 0 ]; then
        log_message "WARNING" "‚ö†Ô∏è $warnings avertissement(s)"
        send_alert "ELSA GESTION - Avertissement" "$warnings probl√®me(s) de performance d√©tect√©(s)."
    else
        log_message "INFO" "‚úÖ Tous les contr√¥les sont OK"
    fi
    
    log_message "INFO" "üèÅ Fin de la v√©rification de sant√©"
}

# V√©rifier si le script est ex√©cut√© directement
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi 